module tb_matrix_vector_multiplication;

// Inputs
reg [7:0] A_row0_0, A_row0_1, A_row0_2;
reg [7:0] A_row1_0, A_row1_1, A_row1_2;
reg [7:0] A_row2_0, A_row2_1, A_row2_2;
reg [7:0] x0, x1, x2;
reg clk, rst;

// Outputs
wire [15:0] y0, y1, y2;

// Instantiate the data-path with pipeline
data_path dp (
    .clk(clk),
    .rst(rst),
    .A_row0_0(A_row0_0), .A_row0_1(A_row0_1), .A_row0_2(A_row0_2),
    .A_row1_0(A_row1_0), .A_row1_1(A_row1_1), .A_row1_2(A_row1_2),
    .A_row2_0(A_row2_0), .A_row2_1(A_row2_1), .A_row2_2(A_row2_2),
    .x0(x0), .x1(x1), .x2(x2),
    .y0(y0), .y1(y1), .y2(y2)
);

// Instantiate the controller
controller ctrl (
    .clk(clk),
    .rst(rst),
    .write_en(write_en),
    .sel(sel)
);

// Clock generation
always begin
    #5 clk = ~clk;
end

// Test stimulus
initial begin
    clk = 0;
    rst = 1;
    #10 rst = 0;

    // Provide matrix A and vector x
    A_row0_0 = 8'd1; A_row0_1 = 8'd2; A_row0_2 = 8'd3;
    A_row1_0 = 8'd4; A_row1_1 = 8'd5; A_row1_2 = 8'd6;
    A_row2_0 = 8'd7; A_row2_1 = 8'd8; A_row2_2 = 8'd9;
    x0 = 8'd1; x1 = 8'd1; x2 = 8'd1;

    // Wait for a few clock cycles to simulate processing
    #50;

    // Display the results
    $display("y0 = %d, y1 = %d, y2 = %d", y0, y1, y2);
    
    // Expected output:
    // y0 = 6 (1*1 + 2*1 + 3*1)
    // y1 = 15 (4*1 + 5*1 + 6*1)
    // y2 = 24 (7*1 + 8*1 + 9*1)
    
    // Check if the results are as expected
    if (y0 == 16'd6 && y1 == 16'd15 && y2 == 16'd24)
        $display("Test Passed");
    else
        $display("Test Failed");

    // Stop the simulation
    $stop;
end

endmodule
